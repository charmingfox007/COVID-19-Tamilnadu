{"version":3,"sources":["Components/MapComponent/Map.js","App.js","serviceWorker.js","index.js"],"names":["CustomMap","props","state","SetPopup","Map","center","zoom","TileLayer","url","attribution","isDefaultMap","input","map","data","Marker","key","properties","District_Code","position","geometry","coordinates","OnClick","setState","Popup","onClose","NAME","TotalCount","ActiveCount","Recovered","Deceased","testCenters","Component","SubMenu","Menu","Title","Typography","Header","Layout","Sider","Content","App","React","useState","currentMap","setMap","className","style","backgroundColor","level","color","paddingTop","defaultSelectedKeys","mode","Item","onClick","title","MailOutlined","PhoneOutlined","margin","padding","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"69HAkEeA,E,kDA5DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,MAHC,E,qDAMT,IAAD,OAyCL,OACI,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,UAAW,WAAYC,KAAM,GACvC,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EA1CW,mBAA5B,EAAKR,MAAMS,aACH,6BACFC,IAAeC,KAAI,SAAAC,GAAI,OACxB,kBAACC,EAAA,EAAD,CAAQC,IAAKF,EAAKG,WAAWC,cAAeC,SAAU,CAClDL,EAAKM,SAASC,YAAY,GAC1BP,EAAKM,SAASC,YAAY,IAC3BC,QAAS,kBAAM,EAAKC,SAAS,CAAEnB,SAAUU,UAE3C,EAAKX,MAAMC,UAAoC,cAAxB,EAAKD,MAAMC,UAA6B,kBAACoB,EAAA,EAAD,CAAOL,SAAU,CACjF,EAAKhB,MAAMC,SAASgB,SAASC,YAAY,GACzC,EAAKlB,MAAMC,SAASgB,SAASC,YAAY,IAC1CI,QAAS,kBAAM,EAAKF,SAAS,CAAEnB,SAAU,SACxC,4BAAK,EAAKD,MAAMC,SAASa,WAAWS,MACpC,6CAAmB,EAAKvB,MAAMC,SAASa,WAAWU,YAClD,8CAAoB,EAAKxB,MAAMC,SAASa,WAAWW,aACnD,2CAAiB,EAAKzB,MAAMC,SAASa,WAAWY,WAChD,0CAAgB,EAAK1B,MAAMC,SAASa,WAAWa,YAK5C,6BACFC,IAAqBlB,KAAI,SAAAC,GAAI,OAC9B,kBAACC,EAAA,EAAD,CAAQC,IAAKF,EAAKG,WAAWC,cAAeC,SAAU,CAClDL,EAAKM,SAASC,YAAY,GAC1BP,EAAKM,SAASC,YAAY,IAC3BC,QAAS,kBAAM,EAAKC,SAAS,CAAEnB,SAAUU,UAE3C,EAAKX,MAAMC,UAAoC,cAAxB,EAAKD,MAAMC,UAA6B,kBAACoB,EAAA,EAAD,CAAOL,SAAU,CACjF,EAAKhB,MAAMC,SAASgB,SAASC,YAAY,GACzC,EAAKlB,MAAMC,SAASgB,SAASC,YAAY,IAC1CI,QAAS,kBAAM,EAAKF,SAAS,CAAEnB,SAAU,SACxC,4BAAK,EAAKD,MAAMC,SAASa,WAAWS,a,GA1ChCM,aCChBC,EAAYC,IAAZD,QACAE,EAAUC,IAAVD,MACAE,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QA8DRC,MA5Df,WAAgB,IAAD,EACgBC,IAAMC,SAAS,kBAD/B,mBACNC,EADM,KACMC,EADN,KAEb,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAACT,EAAD,CAAQU,MAAO,CAAEC,gBAAiB,YAChC,kBAACb,EAAD,CAAOc,MAAO,EAAGF,MAAO,CAAEG,MAAO,QAASC,WAAY,SAAtD,+BAGF,kBAAC,IAAD,KACE,kBAACZ,EAAD,CAAOQ,MAAO,CAAEC,gBAAiB,YAC/B,kBAAC,IAAD,CAAMI,oBAAqB,CAAC,YAC1BC,KAAK,UACL,kBAAC,IAAKC,KAAN,CAAWtC,IAAI,iBAAiBuC,QAAS,kBAAMV,EAAO,qBAAtD,mBAEA,kBAAC,IAAKS,KAAN,CAAWtC,IAAI,WAAWuC,QAAS,kBAAMV,EAAO,oBAAhD,kBACA,kBAACZ,EAAD,CAASjB,IAAI,OACXwC,MACE,8BACE,kBAACC,EAAA,EAAD,MACA,qDAEJ,kBAAC,IAAKH,KAAN,KACE,8BACE,kBAACI,EAAA,EAAD,MACA,gDAEJ,kBAAC,IAAKJ,KAAN,KACE,8BACE,kBAACG,EAAA,EAAD,MACA,yDAKV,kBAAC,IAAD,CAAQV,MAAO,CAAEC,gBAAiB,YAChC,kBAAC,IAAD,CAAYD,MAAO,CAAEY,OAAQ,kBAC3B,kBAAC,IAAWL,KAAZ,KAAkBV,IAEpB,kBAACJ,EAAD,CACEM,UAAU,yBACVC,MAAO,CACLa,QAAS,GACTD,OAAQ,EACRE,UAAW,MAGb,kBAAC,EAAD,CACElD,aAAciC,UC9CVkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c3dcbe8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport * as input from '../../InputData.json'\r\nimport * as testCenters from '../../TestingCenterData.json'\r\n\r\nclass CustomMap extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            SetPopup: null\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const popupLoader = props =>{\r\n            if(this.props.isDefaultMap === 'Affected areas'){\r\n                return <div>\r\n                    {input.features.map(data => (\r\n                    <Marker key={data.properties.District_Code} position={[\r\n                        data.geometry.coordinates[0],\r\n                        data.geometry.coordinates[1]\r\n                    ]} OnClick={() => this.setState({ SetPopup: data })} />\r\n                ))}\r\n                    {this.state.SetPopup && this.state.SetPopup !== 'undefined' && (<Popup position={[\r\n                    this.state.SetPopup.geometry.coordinates[0],\r\n                    this.state.SetPopup.geometry.coordinates[1]\r\n                ]} onClose={() => this.setState({ SetPopup: null })}>\r\n                    <h4>{this.state.SetPopup.properties.NAME}</h4>\r\n                    <h4>Total Count - {this.state.SetPopup.properties.TotalCount}</h4>\r\n                    <h4>Active Count - {this.state.SetPopup.properties.ActiveCount}</h4>\r\n                    <h4>Recovered - {this.state.SetPopup.properties.Recovered}</h4>\r\n                    <h4>Deceased - {this.state.SetPopup.properties.Deceased}</h4>\r\n                </Popup>)}\r\n                </div> \r\n            }\r\n            else{\r\n                return <div>\r\n                    {testCenters.features.map(data => (\r\n                    <Marker key={data.properties.District_Code} position={[\r\n                        data.geometry.coordinates[0],\r\n                        data.geometry.coordinates[1]\r\n                    ]} OnClick={() => this.setState({ SetPopup: data })} />\r\n                ))}\r\n                    {this.state.SetPopup && this.state.SetPopup !== 'undefined' && (<Popup position={[\r\n                    this.state.SetPopup.geometry.coordinates[0],\r\n                    this.state.SetPopup.geometry.coordinates[1]\r\n                ]} onClose={() => this.setState({ SetPopup: null })}>\r\n                    <h4>{this.state.SetPopup.properties.NAME}</h4>\r\n                </Popup>)}\r\n                </div> \r\n            }\r\n\r\n        }\r\n        return (\r\n            <Map center={[11.127123, 78.656891]} zoom={6}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {popupLoader()}\r\n            </Map>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomMap;","import React from 'react';\r\nimport './App.css';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport { Typography } from 'antd';\r\nimport { MailOutlined, PhoneOutlined } from '@ant-design/icons';\r\nimport CustomMap from './Components/MapComponent/Map'\r\nconst { SubMenu } = Menu;\r\nconst { Title } = Typography\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nfunction App() {\r\n  const [currentMap, setMap] = React.useState('Affected areas');\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout >\r\n        <Header style={{ backgroundColor: '#6A5ACD' }}>\r\n          <Title level={4} style={{ color: 'white', paddingTop: '16px' }} >\r\n            COVID-19 Tracker TamilNadu\r\n       </Title></Header>\r\n        <Layout>\r\n          <Sider style={{ backgroundColor: '#F0F8FF' }}>\r\n            <Menu defaultSelectedKeys={['affected']}\r\n              mode=\"inline\">\r\n              <Menu.Item key=\"testingCenters\" onClick={() => setMap(\"Testing Centers\")}>\r\n                Testing Centers</Menu.Item>\r\n              <Menu.Item key=\"affected\" onClick={() => setMap(\"Affected areas\")}>Affected areas</Menu.Item>\r\n              <SubMenu key=\"sub1\"\r\n                title={\r\n                  <span>\r\n                    <MailOutlined />\r\n                    <span>Emergency Contact</span>\r\n                  </span>}>\r\n                <Menu.Item>\r\n                  <span>\r\n                    <PhoneOutlined />\r\n                    <span>044-29510500</span>\r\n                  </span></Menu.Item>\r\n                <Menu.Item>\r\n                  <span>\r\n                    <MailOutlined />\r\n                    <span>ncov2019@gmail.com</span>\r\n                  </span></Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n          </Sider>\r\n          <Layout style={{ backgroundColor: '#F5F5F5' }}>\r\n            <Breadcrumb style={{ margin: '15px 15px 0px' }}>\r\n              <Breadcrumb.Item>{currentMap}</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <Content\r\n              className=\"site-layout-background\"\r\n              style={{\r\n                padding: 15,\r\n                margin: 0,\r\n                minHeight: 400,\r\n              }}\r\n            >\r\n              <CustomMap\r\n                isDefaultMap={currentMap}\r\n              />\r\n            </Content>\r\n          </Layout>\r\n        </Layout>\r\n\r\n      </Layout>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}