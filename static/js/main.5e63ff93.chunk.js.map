{"version":3,"sources":["Components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","Typography","App","React","useState","ActivePopup","SetPopup","className","Map","center","zoom","TileLayer","url","attribution","input","map","data","Marker","key","properties","District_Code","position","geometry","coordinates","OnClick","Popup","onClose","NAME","TotalCount","ActiveCount","Recovered","Deceased","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"22GAoBeA,EAfF,WACb,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAD,sC,wCCkCDC,MAtCf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,MADlC,mBACNC,EADM,KACOC,EADP,KAEb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,0BAAMA,UAAY,aAChB,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,UAAW,WAAYC,KAAM,GACzC,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEbC,IAAeC,KAAI,SAAAC,GAAI,OACtB,kBAACC,EAAA,EAAD,CAAQC,IAAKF,EAAKG,WAAWC,cAAeC,SAAU,CACpDL,EAAKM,SAASC,YAAY,GAC1BP,EAAKM,SAASC,YAAY,IACzBC,QAAS,kBAAMlB,EAASU,SAG5BX,GAAgB,kBAACoB,EAAA,EAAD,CAAOJ,SAAU,CAChChB,EAAYiB,SAASC,YAAY,GACjClB,EAAYiB,SAASC,YAAY,IAC/BG,QAAW,kBAAMpB,EAAS,QAC5B,4BAAKD,EAAYc,WAAWQ,MAC5B,6CAAmBtB,EAAYc,WAAWS,YAC1C,8CAAoBvB,EAAYc,WAAWU,aAC3C,2CAAiBxB,EAAYc,WAAWW,WACxC,0CAAgBzB,EAAYc,WAAWY,eCtB/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e63ff93.chunk.js","sourcesContent":["import ToolBar from '@material-ui/core/ToolBar'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport React from 'react'\r\n\r\nconst NavBar=() =>{\r\nreturn(\r\n    <div>\r\n        <AppBar>\r\n            <ToolBar>\r\n                <Typography>\r\n                    COVID-19 TamilNadu Status\r\n                </Typography>\r\n            </ToolBar>\r\n        </AppBar>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from './Components/NavBar/NavBar';\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport * as input from './InputData.json'\r\n\r\nfunction App() {\r\n  const [ActivePopup, SetPopup] = React.useState(null);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <NavBar />\r\n      </header>\r\n      <body className = 'container'>\r\n        <Map center={[11.127123, 78.656891]} zoom={6}>\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          {input.features.map(data => (\r\n            <Marker key={data.properties.District_Code} position={[\r\n              data.geometry.coordinates[0],\r\n              data.geometry.coordinates[1]\r\n            ]} OnClick={() => SetPopup(data)} />\r\n          ))}\r\n\r\n          {ActivePopup && (<Popup position={[\r\n            ActivePopup.geometry.coordinates[0],\r\n            ActivePopup.geometry.coordinates[1]\r\n          ]}  onClose = {() => SetPopup(null)}>\r\n            <h4>{ActivePopup.properties.NAME}</h4>\r\n            <h4>Total Count - {ActivePopup.properties.TotalCount}</h4>\r\n            <h4>Active Count - {ActivePopup.properties.ActiveCount}</h4>\r\n            <h4>Recovered - {ActivePopup.properties.Recovered}</h4>\r\n            <h4>Deceased - {ActivePopup.properties.Deceased}</h4>\r\n          </Popup>)}\r\n\r\n        </Map>\r\n\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}